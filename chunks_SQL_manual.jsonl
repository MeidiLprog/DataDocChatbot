{"doc": "SQL-Manual.pdf", "page": 116, "text": "Syntax Summary continued CREATE STATEMENT [ee col type (size ) list NAME CHAR ( 20 ), BDATE DATE, SALES NUMERIC ( 9, 2 ) FOREIGN KEY |( col list ) ( COUNTRY ) REFERENCES table REFERENCES COUNTRIES ( col list ) ( COUNTRY ) PR DROP STATEMENT DROP 115"}
{"doc": "SQL-Manual.pdf", "page": 117, "text": "A Brief Critique In spite of its popularity and acceptance as an official standard, the SQL language is rather poorly defined and suffers from a number of internal inconsistencies, such as: ¢ The SELECT clause precedes the FROM clause, when, logically, one chooses the appropriate tables first, then decides which columns should be displayed. * The DISTINCT keyword operates on rows, yet must be entered in the SELECT clause (where columns, not rows, are listed). ¢ The asterisk is used for multiple purposes, unnecessarily complicating the SQL syntax. Consider, for example, SELECT *, POP*1.1, and SELECT COUNT(*). ¢ Functions cannot be arbitrarily nested. For example, AVG(POP/AREA) is allowed, but AVG(COUNT(RELIGION)) is not. ¢ SQL ignores null values when applying statistical functions like AVG, rather than providing an option to either ignore them or include them in the row count. * The GROUP BY clause should be optional since the required information can usually be deduced from the SELECT clause. : * The HAVING clause is confusing; statistical functions should be allowed in the WHERE clause, and the HAVING clause should be eliminated altogether. ¢ The syntax for different types of SQL statements is inconsistent. For example: SELECT columns INSERT UPDATE table DELETE FROM tables INTO table(columns) SET column=value.... FROM table WHERE... VALUES(values) WHERE... WHERE... ¢ View definitions may not contain ORDER BY clauses. While some of these limitations are addressed in certain SQL dialects, that is exactly the problem — there shouldn't be dialects, there should be ONE good standard. 116"}
{"doc": "SQL-Manual.pdf", "page": 118, "text": "Recommended Reading An Introduction to Database Systems C. J. Date Probably the best all-around book on relational database ever written. Useful as an introductory survey, but equally good as a reference text. We highly recommend this book to all who are interested in relational database technology. A Guide to the SQL Standard C. J. Date Another excellent work from Mr. Date. Concise, thorough, yet relatively easy to read. . Date has also authored or co-authored several other books on specific versions of SQL (‘A Guide to DB2,' for example). These may be more meaningful to you if you know which particular product you will be using. ERA and LOGIC Workshop Manuals Relational Systems Corporation Two great database design methodologies (even if we do say so ourselves) for quickly and accurately designing a relational database that can be immediately implemented on any SQL system. ERA is preferred for operational systems, while LOGIC is better for data warehouse applications. You should really invest in both. The Holy Bible God User manual for all the Sons of Adam. Pure, tried, sure. To be read on a daily basis (bread alone won't do, as you should know). A lamp to our feet; a light to our path. More to be desired than gold, yea, than much fine gold. Also explains why human languages — even artificial ones like SQL — are so messy. See Genesis 11. 117"}
{"doc": "SQL-Manual.pdf", "page": 119, "text": "Index alias, 43, 51, 59 God, omnipresent , query, 6 AND, 25 grand total, 46 querying, 3 ANSI, 5 GROUP BY, 49 quote ('), 13 arithmetic operator, 38 AS, 43, 51, 59, 90 HAVING, 52 range, 27 asterisk (* ), 9, 46 REFERENCES, 86 AVG, 46 IN, 31, 66 regeneration, 110 index, 88 relational database, 4 BETWEEN, 27 inner query, 68 ROLLBACK, 77 INSERT, 6, 71, 82 row, 4 calculated column, 38 integrity constraint, 84 Chamberlin, D.D., 5 INTO, 71 save, 77 CHECK, 85 IS NULL, 33 SELECT, 6, 9-69 clause, 7 ISO, 5 SET, 73 column,4 single-quote ('), 13 column alias, 43, 51 join, 55 single-valued subquery, 64 column list, 11, 71 sorting, 17 column position, 17, 61 keyword, 7 SQL, 5 COMMIT, 77 statistical function, 46 comparison, 14, 85 LIKE, 23 Structured Query Language, 5 comparison operator, 14 loading tables, 82 subquery, correlated, 68 compound, 25, 29 LOGIC, 117 subquery, multi-valued, 66 constraint, 84 subquery, single-valued, 64 correlated subquery, 68 maintaining, 3 subtotal, 49 COUNT, 46 maintenance, 6 SUM, 46 course objective, 3 MAX, 46 syntax summary, 111 CREATE, 6, 80, 88, 90 MIN, 46 critique, 116 multi-valued subquery, 66 table, 4, 80 table alias, 59, 68 Date, C.J., 117 negation, 35 total depravity, 110 date value, 13 non-numeric value, 13 total, grand, 46 defining, 3 NOT, 35 transaction, 77 definition, 6 NOT NULL, 84 DEFAULT, 84 null, 33 underscore (_ ), 23 default value, 71 numeric value, 13 undo, 77 DELETE, 75 UNION, 61 DESC, 17 operand, 38 UNIQUE, 85 , DISTINCT, 20, 46 operator, 14, 38 UPDATE, 6, 73 DROP, 6, 80, 88, 90 OR, 29 duplicate row, 20, 61 ORDER BY, 17, 41, 51, 61 value list, 31, 71 outer query, 68 value range; 27 ; ERA, 117 VALUES, 71 expression, 38, 39 parameter, 7, 46 value, date, 13 parentheses, 31, 35, 38 value, non-numeric, 13 FOREIGN KEY, 86 pattern, 23 value, numeric, 13 FROM, 9, 57, 59 percent ( % ), 23 view, 90 full column name, 55 precedence, 35 function, statistical, 46 PRIMARY KEY, 86, 87 WHERE, 15, 41, 57 118"}
